# coding=utf-8

class CarStopRoot(tk.Tk):
    def __init__(self, *args, **kwargs):
        self.locat = 0
        self.carnum = 0
        self.datamode = 0
        self.updatamode = 1
    def show(self, *args, **kwargs):
        tk.Tk.__init__(self, *args, **kwargs)
        
        self.locat = ""
        self.title("停车设置")
#         self.geometry('400x400')
        self.columnconfigure(0, weight=1)
        self.columnconfigure(1, weight=1)
        self.rowconfigure(0, weight=1) 
        self.rowconfigure(1, weight=1)
        self.rowconfigure(2, weight=1)
        self.rowconfigure(4, weight=1)
        self.rowconfigure(5, weight=1)
        self.rowconfigure(6, weight=1)
        
        carnumlabel = tk.Label(self, text="车位数量:")
        carnumlabel.grid(sticky=tk.W)
        self.carnumspinbox = tk.Spinbox(self, from_=4, to=50, width=10)

        self.carnumspinbox.grid(row=0, column=1)
        carlolabel = tk.Label(self, text="车位位置:")
        carlolabel.grid(row=2, column=0,sticky=tk.W)
        self.carlocomb = ttk.Combobox(self, width=10)
        self.carlocomb['value'] = ("方兴大厦", "其他")
        self.carlocomb.set("方兴大厦")
        self.carlocomb.grid(row=2, column=1,sticky=tk.W)
        
        tk.Label(self, text="数据上传:").grid(row=3, column=0)
        self.updatamodecomb = ttk.Combobox(self,width=10)
        self.updatamodecomb.grid(row=3,column=1)
        self.updatamodecomb['value']=("开启","不开启")
        self.updatamodecomb.set("不开启")
        
        tk.Label(self, text="数据源:").grid(row=4, column=0)
        self.datamodecomb = ttk.Combobox(self,width=10)
        self.datamodecomb.grid(row=4,column=1)
        self.datamodecomb['value']=("串口数据","网络数据")
        self.datamodecomb.set("串口数据")
        ttk.Button(self, text="确认", command=self.carstopconfirm).grid(row=5, column=0, columnspan=2)
      
    def nothing(self):
        pass  
    def carstopconfirm(self):
        self.locat = self.carlocomb.current()
        self.carnum = int(self.carnumspinbox.get())
        self.datamode = self.datamodecomb.current()
        self.updatamode = self.updatamodecomb.current()
        global root
        root.appFrame.DrawParking()
        try:
            self.destroy()
        except:
            pass

